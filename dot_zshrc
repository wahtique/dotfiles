#############################################
################# ZSH #######################
#############################################

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd extendedglob nomatch notify
# remove terminal beeps
unsetopt beep
bindkey -v
# trick found on SO to prevent ctrl+ left or right arrow
# from actually printing something 
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename "$HOME/.zshrc"

autoload -Uz compinit

# >>> scala-cli completions >>>
fpath=("$HOME/.local/share/scalacli/completions/zsh" $fpath)
# <<< scala-cli completions <<<

compinit
# End of lines added by compinstall

# Path is updated here so that ZI conf can be done
# taking into account installed bins

# PATH UPDATES
path+=(
  # custom tools which dont really belong in /bin or /usr/bin
  "$HOME/tools"
  # coursier + g8
  "$HOME/.local/share/coursier/bin"
  # rust
  "$HOME/.cargo/bin"
  # alternative bin
  "$HOME/.local/bin"
  # golang
  "/usr/local/go/bin"
  # node
  "$HOME/.nvm"
)
export PATH

############################################
########### PROMPT #########################
############################################

eval "$(oh-my-posh init zsh --config ~/.custom-theme.omp.yaml)"
enable_poshtransientprompt

############################################
############# ZI ###########################
############################################

# install ZI if necessary

if [[ -r "${XDG_CONFIG_HOME:-$HOME/.config}/zi/init.zsh" ]]; then
  source "${XDG_CONFIG_HOME:-$HOME/.config}/zi/init.zsh" && zzinit
else 
  sh -c "$(curl -fsSL https://git.io/get-zi)" -- -a loader
  source "${XDG_CONFIG_HOME:-$HOME/.config}/zi/init.zsh" && zzinit
fi

# programs
# some might not work on ubuntu as 
# there may be name collisions

if [[ $+commands[fzf] < 1 ]]; then
  zi pack for fzf
fi

if [[ $+commands[fd] < 1 ]]; then 
  zi ice from'gh-r' as'program' mv'fd* fd' sbin'**/fd(.exe|) -> fd'
  zi light @sharkdp/fd
fi

if [[ $+commands[bat] < 1 ]]; then
  zi ice from'gh-r' as'program' mv'bat* bat' sbin'**/bat(.exe|) -> bat'
  zi light @sharkdp/bat
fi

if [[ $+commands[exa] < 1 ]]; then
  zi ice from'gh-r' as'program' sbin'**/exa -> exa' atclone'cp -vf completions/exa.zsh _exa'
  zi light ogham/exa
fi

if [[ $+commands[navi] < 1 ]]; then
# seem broken depending on some OS 
#  zi ice lucid wait as'program' from"gh-r" has'fzf' atclone'make install'
#  zi light denisidoro/navi
  bash <(curl -sL https://raw.githubusercontent.com/denisidoro/navi/master/scripts/install)
fi

# INSTALL FROM GIT IS BROKEN
if [[ $+commands[zoxide] <  1 ]]; then 
#   zi ice as'program' from'gh-r' pick'zoxide' \
#  atclone'ln -s completions/_zoxide -> _zoxide;
#  cp man/man1/*.1 $ZI[MAN_DIR]/man1; ./zoxide init zsh --cmd x > init.zsh' \
#  atpull'%atclone' src'init.zsh' nocompile'!'
#  zi light ajeetdsouza/zoxide
  curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
fi 

# plugins 

# autopair delimiters for zsh
zi ice wait lucid pick'autopair.zsh'
zi load hlissner/zsh-autopair
# direnv
zi load ptavares/zsh-direnv
# git aliases
zi snippet OMZP::git
# <esc> <esc> for the fuck
zi ice wait'1' lucid  has"thefuck"
zi light laggardkernel/zsh-thefuck
# aliases exa by ls
zi ice has"exa"
zi light "RitchieS/zsh-exa"
# add colors to `man`
zi light ael-code/zsh-colored-man-pages
# ssh agent
zi ice use"ssh-agent.zsh" from"github"
zi load bobsoppe/zsh-ssh-agent
# `extract <filename>` and voila !
zi light le0me55i/zsh-extract
# timewarrior aliases
# zi ice has"timew"
# zi light svenXY/timewarrior
# generate autocompletes from `--help` for most cli tools
# requires the corresponding bin
zi ice wait lucid has"cod" for dim-an/cod

# FZF dependent plugins
# better cd using fzf
# zi ice use"init.zsh" has"fzf"
# zi load "b4b4r07/enhancd"

# zoxide : better cd + autojump 
# `x` for cd 
# `xi` for interactive cd
zi has'zoxide' wait lucid for \
  z-shell/zsh-zoxide
#fzf for tab completion
zi ice has"fzf"
zi light Aloxaf/fzf-tab
# A zsh plugin to search in the local tree of subdirectories for files
# ALT+R to search hand Read
# ALT+E to search and Edit
zi ice wait lucid has'fzf' pick'fzf-finder.plugin.zsh'
zi light leophys/zsh-plugin-fzf-finder
# CTRL+R to search history
zi ice lucid wait'0' has"fzf"
zi light joshskidmore/zsh-fzf-history-search
# CTRL+N for cheatsheets
# REQUIRES NAVI
zi ice has"navi" has"fzf"
zi load "icatalina/zsh-navi-plugin"

# these should be after the fzf plugins
zi load "zsh-users/zsh-autosuggestions"
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#6f6c5d"

# fix for broken history 
# leave it before syntax highlighting plugin to not break 
# syntax highlighting in history search 
autoload up-line-or-beginning-search
autoload down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

zi light "zdharma/fast-syntax-highlighting"

############################################
########### ENVIRONMENT ####################
############################################

if (( $+commands[navi] )); then;
  # use ctrl+n to show cheat sheets
  bindkey '^n' navi_widget
fi

if (( $+commands[fzf] )); then
  export FZF_FINDER_EDITOR_BINDKEY='^[e'
  export FZF_FINDER_PAGER_BINDKEY='^[r'
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# intellij options
export IDE_VM_OPTIONS="-Xmx2048m"

# first needed by chezmoi
# most likely also expected by other tools
export EDITOR=vim

# make fzf search hidden files too
export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

# make fzf finder plugin search hidden files too
export FZF_FINDER_FD_OPTS="--hidden -t f"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# sbt 
if (( $+commands[sbt] )); then; 
  alias sbtc="sbt --client"
  # path=($path /path/to/dir/containing/sbtc)
  fpath=($fpath ${SBT_SOURCE_DIR}/client/completions)
  export SBT_OPTS="-Xms1g -Xmx4g"
fi

# aliases
# scala 
alias sc=scala-cli
alias cs=coursier
# shell
alias cz=chezmoi

# source secrets
if [[ -f ~/.secrets ]]; then
  source ~/.secrets
fi
