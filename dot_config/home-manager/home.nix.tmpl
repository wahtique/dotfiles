{ pkgs, ... }:
let
  nur = builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz";
in
{
  imports = [
    ./session.nix
    ./git.nix
    ./gpg.nix
    ./shell.nix
    ./ssh.nix
    ./stylix.nix
  ]
  ++ (map (name: ./sdks/${name}) (builtins.attrNames (builtins.readDir ./sdks)))
  ++ (map (name: ./gui/${name}) (builtins.attrNames (builtins.readDir ./gui)));

  targets.genericLinux.enable = true;

  nix = {
    gc = {
      automatic = true;
      options = "--delete-older-than 30d";
    };
  };

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
    packageOverrides = pkgs: {
      nur = import nur {
        inherit pkgs;
      };
    };
  };

  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    stateVersion = "25.05";

    packages = with pkgs; [
      #
      # dev
      #
      devbox
      melody # regex but readable
      sops # secret ops using AGE
      just # make for humans
      aoc-cli # advent of code cli
      openapi-generator-cli # generate SDKs from open-api specs
      yq
      ansible
      terraform
      terraform-ls
      libressl
      git-absorb # magic git fixup
      act # run github action locally
      lldb # debugger for native code
      lazysql
      #
      # sdks / runtimes / interpreters
      #
      lua
    ];
  };

  services = {
    home-manager = {
      autoUpgrade = {
        enable = true;
        frequency = "daily";
      };
      autoExpire = {
        enable = true;
        frequency = "weekly";
        timestamp = "-30 days";
        store = {
          cleanup = true;
          options = "--delete-older-than 30d";
        };
      };
    };
  };
  
  programs = {
    home-manager.enable = true;
    go.enable = true;
    neovim = {
      enable = true;
      withPython3 = true;
      vimAlias = true;
      viAlias = true;
    };
    
  };
}
