{ pkgs, ... }:
let
  nur = builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz";
in
{
  imports = [
    ./session.nix
    ./git.nix
    ./shell.nix
    ./stylix.nix
  ]
  ++ (map (name: ./sdks/${name}) (builtins.attrNames (builtins.readDir ./sdks)))
  ++ (map (name: ./gui/${name}) (builtins.attrNames (builtins.readDir ./gui)));

  targets.genericLinux.enable = true;

  nix = {
    gc = {
      automatic = true;
      options = "--delete-older-than 30d";
    };
  };

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
    packageOverrides = pkgs: {
      nur = import nur {
        inherit pkgs;
      };
    };
  };

  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    stateVersion = "24.11";

    packages = with pkgs; [
      #
      # dev
      #
      devbox
      melody # regex but readable
      sops # secret ops using AGE
      just # make for humans
      aoc-cli # advent of code cli
      openapi-generator-cli # generate SDKs from open-api specs
      yq
      (google-cloud-sdk.withExtraComponents [ google-cloud-sdk.components.gke-gcloud-auth-plugin ])
      ansible
      kubectl
      terraform
      terraform-ls
      libressl
      git-absorb # magic git fixup
      act # run github action locally
      lldb # debugger for native code
      lazysql
      #
      # sdks / runtimes / interpreters
      #
      lua
    ];
  };

  services = {
    gpg-agent = {
      enable = true;
      enableZshIntegration = true;
      # useful for gpg agent forwarding
      enableExtraSocket = true;
      defaultCacheTtl = 34560000;
      maxCacheTtl = 34560000;
      extraConfig = ''
        {{ if eq .chezmoi.os "linux" }}
        {{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
        # WSL-specific code
        pinentry-program "/mnt/c/Program Files (x86)/Gpg4win/bin/pinentry.exe"
        {{   else }}
        pinentry-program pinentry-qt
        allow-loopback-pinentry
        {{   end }}
        {{ end }}
      '';
    };
    ssh-agent.enable = true;
    home-manager = {
      autoUpgrade = {
        enable = true;
        frequency = "daily";
      };
      autoExpire = {
        enable = true;
        frequency = "weekly";
        timestamp = "-30 days";
        store = {
          cleanup = true;
          options = "--delete-older-than 30d";
        };
      };
    };
  };

  programs = {
    home-manager.enable = true;
    go.enable = true;
    neovim = {
      enable = true;
      withPython3 = true;
      vimAlias = true;
      viAlias = true;
    };
    gpg = {
      enable = true;
      # backup current `pubring.kbx` and `trustdb.gpg` before disabling !
      mutableTrust = true;
      mutableKeys = true;
      settings = {
        # Harden storage
        s2k-mode = "3"; # use derivation instead of plain or salted hash
        s2k-count = "60123123";
        # Use moderne cipher to store your keys on your laptops:
        s2k-cipher-algo = "AES256";
        s2k-digest-algo = "SHA512";
        # Use modern ciphers for messages / files
        personal-cipher-preferences = "AES256";
        personal-digest-preferences = "SHA512";
        default-preference-list = [
          "SHA512"
          "SHA384"
          "SHA256"
          "RIPEMD160"
          "AES256"
          "AES192"
          "TWOFISH"
          "BLOWFISH"
          "ZLIB"
          "BZIP2"
          "ZIP"
          "Uncompressed"
        ];
        cipher-algo = "AES256";
        digest-algo = "SHA512";
        cert-digest-algo = "SHA512";
        compress-algo = "ZLIB";
        # Privacy options
        no-emit-version = true;
        no-comments = true;
        export-options = "export-minimal";
        # Better reading & displays options
        keyid-format = "0xlong";
        list-options = "show-uid-validity";
        verify-options = "show-uid-validity";
        # Inform GPG the you use (for meta data)
        charset = "utf-8";
        # Use loopback pinentry
        # pinentry-mode = "loopback";

      };
    };
    ssh = {
      enable = true;
      enableDefaultConfig = false;
      matchBlocks = {
        "*" = {
          addKeysToAgent = "yes";
          forwardAgent = true;
        };
      };
      includes = [
        "$HOME/.ssh/config.*"
      ];
    };
  };
}
