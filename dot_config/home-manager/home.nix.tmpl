{ pkgs, ... }:

{
  imports = [
    ./session.nix
    ./git.nix
    ./shell.nix
    ./sdks/nix.nix
    ./sdks/java.nix
    ./sdks/rust.nix
    ./sdks/scala.nix
  ];

  targets.genericLinux.enable = true;

  nix = {
    gc = {
      automatic = true;
      options = "--delete-older-than 30d";
    };
  };

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
    packageOverrides = pkgs: {
      nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
        inherit pkgs;
      };
    };
  };

  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    stateVersion = "23.11"; 

    packages = with pkgs; [
      #
      # dev
      #
      devbox
      melody # regex but readable
      sops # secret ops using AGE
      just # make for humans
      aoc-cli # advent of code cli
      openapi-generator-cli # generate SDKs from open-api specs
      #
      # sdks / runtimes / interpreters
      #
      lua
      nodejs_18
      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];


  };
  programs = {
    home-manager.enable = true;
    go.enable = true;
    helix = {
      enable = true;
    };
    neovim = {
      enable = true;
      withPython3 = true;
      vimAlias = true;
      viAlias = true;
    };
    
  };
}
