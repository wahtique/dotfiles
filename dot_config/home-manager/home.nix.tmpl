{ config, pkgs, ... }:

{
  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    # This value determines the Home Manager release that your configuration is
    # compatible with. This helps avoid breakage when a new Home Manager release
    # introduces backwards incompatible changes.
    #
    # You should not change this value, even if you update Home Manager. If you do
    # want to update the value, then make sure to first check the Home Manager
    # release notes.
    stateVersion = "23.05"; # Please read the comment before changing.

    # The home.packages option allows you to install Nix packages into your
    # environment.
    packages = [
      # shell
      pkgs.zi
      pkgs.oh-my-posh
      pkgs.fd
      pkgs.cod
      pkgs.neofetch
      pkgs.silver-searcher
      (pkgs.nerdfonts.override { fonts = [ "JetBrainsMono" ]; })
      # dev
      pkgs.devbox
      # scala
      pkgs.coursier
      pkgs.scala-cli
      # nix
      pkgs.rnix-lsp
      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (pkgs.writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];

    # Home Manager is pretty good at managing dotfiles. The primary way to manage
    # plain files is through 'home.file'.
    file = {
      # # Building this configuration will create a copy of 'dotfiles/screenrc' in
      # # the Nix store. Activating the configuration will then make '~/.screenrc' a
      # # symlink to the Nix store copy.
      # ".screenrc".source = dotfiles/screenrc;

      # # You can also set the file content immediately.
      # ".gradle/gradle.properties".text = ''
      #   org.gradle.console=verbose
      #   org.gradle.daemon.idletimeout=3600000
      # '';
    };

    # You can also manage environment variables but you will have to manually
    # source
    #
    #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
    #
    # or
    #
    #  /etc/profiles/per-user/wahtique/etc/profile.d/hm-session-vars.sh
    #
    # if you don't want to manage your shell through Home Manager.
    sessionVariables = {
      EDITOR = "vim";
    };

    sessionPath = [
      # custom tools which dont really belong in /bin or /usr/bin
      "$HOME/tools"
      # coursier + g8
      "$HOME/.local/share/coursier/bin"
      # rust
      "$HOME/.cargo/bin"
      # alternative bin
      "$HOME/.local/bin"
      # golang
      "/usr/local/go/bin"
      # go binaries
      "$HOME/go/bin"
      # solidity stuff 
      "$HOME/.bifrost/bin"
    ];

    shellAliases = {
      # scala 
      sc = "scala-cli";
      cs = "coursier";
      sbtc = "sbt --client";
      # shell
      cz = "chezmoi";
    };
  };

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
  };

  programs = {
    home-manager.enable = true;
    zoxide.enable = true;
    direnv.enable = true;
    navi.enable = true;
    git.enable = true;
    fzf.enable = true;
    exa.enable = true;
    htop.enable = true;
    bat.enable = true;
    java.enable = true;
    sbt.enable = true;
    go.enable = true;
  };

}
