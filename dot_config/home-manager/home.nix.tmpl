{ pkgs, ... }:

{
  imports = [
    ./session.nix
    ./rust.nix
    ./scala.nix
    ./git.nix
  ];

  targets.genericLinux.enable = true;

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
    packageOverrides = pkgs: {
      nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
        inherit pkgs;
      };
    };
  };

  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    # This value determines the Home Manager release that your configuration is
    # compatible with. This helps avoid breakage when a new Home Manager release
    # introduces backwards incompatible changes.
    #
    # You should not change this value, even if you update Home Manager. If you do
    # want to update the value, then make sure to first check the Home Manager
    # release notes.
    stateVersion = "23.11"; # Please read the comment before changing.

    # Home Manager is pretty good at managing dotfiles. The primary way to manage
    # plain files is through 'home.file'.
    # file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
    # };

    packages = with pkgs; [
      #
      # shell
      #
      zinit # plugin manager
      # oh-my-posh # prompt ; cross shell
      atuin # better zsh history
      fd # better find
      cod # turn any --help into completion
      tree # pretty print directories
      zoxide # z on steroids
      neofetch # flexx your OS
      silver-searcher # ag
      eza # maintained fork of exa
      (nerdfonts.override { fonts = [ "JetBrainsMono" ]; })
      diff-so-fancy # fancy diffs ( for git )
      tealdeer # tldr in rust
      ripgrep # better grep
      meld # gui differ
      banner # print big banners
      figlet # better banners
      toilet # even better banners
      #
      # dev
      #
      devbox
      gh
      melody # regex but readable
      sops # secret ops using AGE
      just # make for humans
      helix # modern vim ? 
      aoc-cli # advent of code cli
      openapi-generator-cli # generate SDKs from open-api specs
      direnv
      #
      # nix
      #
      nil
      cachix
      #
      # sdks / runtimes / interpreters
      #
      lua
      nodejs_18
      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];

    # multiple jdks because latest is not always compatible with everything
    # eg. sbt-buildinfo
    file."jdks/zulu17".source = pkgs.zulu17;
  };

  programs = {
    home-manager.enable = true;
    navi.enable = true;
    fzf.enable = true;
    htop.enable = true;
    bat.enable = true;
    java.enable  = true;
    go.enable = true;
    neovim = {
      enable = true;
      withPython3 = true;
      vimAlias = true;
      viAlias = true;
    };
    thefuck.enable = true;
    oh-my-posh = {
      enable = true;
      enableZshIntegration = true;
      settings = builtins.fromJSON(
        builtins.unsafeDiscardStringContext(
          builtins.readFile "/home/{{ .username }}/.config/oh-my-posh/bubbles-white.omp.json"
      ));
    };
    zsh = {
      enable = true;
      shellAliases = {
        # HOME MANAGER
        hm = "home-manager";
        hms = "home-manager switch";
        # CHEZMOI
        cz = "chezmoi";
        # reload dotfiles
        # chezmoi hook will also :
        # - update nix packages 
        # - build new derivation
        # - cleanup old generations
        # - source ~/.zshrc
        # - update zi
        # - update zsh plugins 
        cza = "chezmoi apply";
        # same as apply but update from git before
        czu = "chezmoi update";
        # SHELL TOOLS
        # eza is a maintained fork of exa
        exa = "eza";
        # compatibility fix for latest versions of eza  with zsh-exa
        ls = "eza --group-directories-first --icons --color-scale all";
        # VS CODE
        c = "code";
        ci = "code-insiders";
      };
      
      initExtraFirst = ''
        source $HOME/.zshrc.extra
      '';
    };
  };
}
