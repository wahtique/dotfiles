{ config, pkgs, ... }:

{
  home = {
    # Home Manager needs a bit of information about you and the paths it should
    # manage.
    username = "{{ .username }}";
    homeDirectory = "/home/{{ .username }}";

    # This value determines the Home Manager release that your configuration is
    # compatible with. This helps avoid breakage when a new Home Manager release
    # introduces backwards incompatible changes.
    #
    # You should not change this value, even if you update Home Manager. If you do
    # want to update the value, then make sure to first check the Home Manager
    # release notes.
    stateVersion = "23.11"; # Please read the comment before changing.

    # The home.packages option allows you to install Nix packages into your
    # environment.
    packages = [
      #
      # shell
      #
      pkgs.zi # plugin manager
      pkgs.oh-my-posh # prompt
      pkgs.fd # better find
      pkgs.cod # turn any --help into completion
      pkgs.tree # pretty print directories
      pkgs.zoxide # z on steroids
      pkgs.neofetch # flexx your OS
      pkgs.silver-searcher # ag
      pkgs.eza # maintained fork of exa
      (pkgs.nerdfonts.override { fonts = [ "JetBrainsMono" ]; })
      pkgs.diff-so-fancy # fancy diffs ( for git )
      pkgs.tealdeer # tldr in rust
      pkgs.ripgrep # better grep
      pkgs.meld # gui differ
      #
      # dev
      #
      pkgs.devbox
      pkgs.gh
      pkgs.melody # regex but readable
      pkgs.sops # secret ops using AGE
      pkgs.just # make for humans
      pkgs.helix
      pkgs.direnv
      # scala
      pkgs.coursier # scala package manager
      pkgs.scala-cli
      pkgs.metals
      pkgs.scalafmt
      # rust
      pkgs.rustc
      pkgs.rust-analyzer
      pkgs.rustfmt
      pkgs.clippy
      pkgs.cargo
      # nix
      pkgs.rnix-lsp
      # runtimes / interpreters
      pkgs.lua
      pkgs.nodejs-slim
      pkgs.nodePackages.npm
      # python stuff
      # commented out because a bit too messy with Nix
      # pkgs.python311
      # pkgs.poetry
      # pkgs.python311Packages.pip
      # pkgs.python311Packages.build
      # pkgs.python311Packages.pynvim

      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (pkgs.writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];

    # Home Manager is pretty good at managing dotfiles. The primary way to manage
    # plain files is through 'home.file'.
    file = {
      # # Building this configuration will create a copy of 'dotfiles/screenrc' in
      # # the Nix store. Activating the configuration will then make '~/.screenrc' a
      # # symlink to the Nix store copy.
      # ".screenrc".source = dotfiles/screenrc;

      # # You can also set the file content immediately.
      # ".gradle/gradle.properties".text = ''
      #   org.gradle.console=verbose
      #   org.gradle.daemon.idletimeout=3600000
      # '';
    };

    # You can also manage environment variables but you will have to manually
    # source
    #
    #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
    #
    # or
    #
    #  /etc/profiles/per-user/$USERNAME/etc/profile.d/hm-session-vars.sh
    #
    # if you don't want to manage your shell through Home Manager.
    sessionVariables = {
      EDITOR = "vim";
      SBT_OPTS = "-Xms1g -Xmx4g -Xss8M -XX:ReservedCodeCacheSize=256m -XX:+UseParallelGC";
      # intellij options
      IDE_VM_OPTIONS = "-Xmx2048m";
    };

    sessionPath = [
      # coursier + g8
      "$HOME/.local/share/coursier/bin"
      # rust
      "$HOME/.cargo/bin"
      # alternative bin
      "$HOME/.local/bin"
      # golang
      "/usr/local/go/bin"
      # go binaries
      "$HOME/go/bin"
      # solidity stuff 
      "$HOME/.bifrost/bin"
      # npm packages
      "$HOME/.npm-packages/bin"
    ];
  };

  nixpkgs.config = {
    allowUnfree = true;
    allowUnfreePredicate = _: true;
    allowBroken = true;
  };

  programs = {
    home-manager.enable = true;
    # nix-direnv not used
    # direnv.enable = true;
    navi.enable = true;
    git = {
      enable = true;
      userName = "{{ .githubUsername }}";
      userEmail = "{{ .email }}";
      extraConfig = {
        core = {
          editor = "vim";
          pager = "diff-so-fancy | bat";
        };
        init = {
          defaultBranch = "main";
        };
        pull = {
          rebase = "true";
        };
        rebase = {
          autoStash = "true";
        };
        merge = {
          conflictStyle = "diff3";
        };
        diff = {
          colorMoved = "default";
        };
        interactive = {
          diffFilter = "diff-so-fancy --patch";
        };
      };
    };
    lazygit.enable = true;
    fzf.enable = true;
    htop.enable = true;
    bat.enable = true;
    java = {
      enable = true;
      # use oracle or openjdk 8, 11, or 17 for scala metals
      package = pkgs.openjdk17-bootstrap;
    };
    sbt.enable = true;
    go.enable = true;
    neovim = {
      enable = true;
      withPython3 = true;
      vimAlias = true;
      viAlias = true;
    };
    thefuck.enable = true;
    # pyenv = {
    #   enable = true;
    # };
    # npm = {
    #   enable = true;
    #   npmrc = 
    #   ''
    #     prefix = ~/.npm-global
    #     color = true
    #   '';
    # };
  };
}
