{ pkgs, lib, ... }:
{
  home.packages = with pkgs; [
    zinit # plugin manager
    cod # turn any --help into completion
    tree # pretty print directories
    fastfetch # flexx your OS : alternative to freshly deceased neofetch
    silver-searcher # ag
    nerd-fonts.jetbrains-mono
    meld # gui differ
    banner # print big banners
    figlet # better banners
    toilet # even better banners
    dust # disk usage for humans
    yazi # file explorer
    sd # sed for humans
    bunyan-rs # color logs
    vivid # ls / eza colors gen
    dotenv-cli
    dotenvx
  ];

  systemd.user = {
    timers.zinit-update = {
      Unit.Description = "zinit plugins update";

      Install.WantedBy = [ "timers.target" ];

      Timer = {
        OnCalendar = "weekly";
        Unit = "zinit-update.service";
        Persistent = true;
      };
    };
    services.zinit-update = {
      Unit = {
        Description = "zinit plugins update";
        After = [ "network.target" ];
      };

      Install.WantedBy = [ "default.target" ];

      # force sh to run the update all in zsh interactive mode
      Service.ExecStart = toString (
        pkgs.writeShellScript "zinit-update.zsh" ''
          echo "Update zinit plugins"
          /usr/bin/env zsh -i -c "zinit update --all"
          /usr/bin/env zsh -i -c "zinit update OMZP::git"
        ''
      );
    };
  };

  programs = {
    atuin = {
      enable = true;
      enableZshIntegration = true;
      daemon.enable = true;
      settings = {
        auto_sync = false;
        update_check = false;
        search_mode = "fuzzy";
        filter_mode = "global";
        workspaces = true;
        style = "compact";
        inline_height = 15;
        show_preview = true;
        stats = {
          common_prefix = [ "sudo" ];
          ignored_commands = [
            "cd"
            "ls"
            "vi"
            "nvim"
          ];
        };
        theme.name = "catppuccin-mocha-mauve";
      };
      themes = {
        "catppuccin-mocha-mauve" = {
          theme.name = "catppuccin-mocha-mauve";
          colors = {
            AlertWarn = "#fab387";
            AlertError = "#f38ba8";
            Annotation = "#cba6f7";
            Base = "#cdd6f4";
            Guidance = "#9399b2";
            Important = "#f38ba8";
            Title = "#cba6f7";
          };
        };
      };
    };
    bat = {
      enable = true;
      # themes = {
      #   catppucin-mocha = {
      #     src = pkgs.fetchurl {
      #       url = "https://raw.githubusercontent.com/catppuccin/bat/main/themes/Catppuccin%20Mocha.tmTheme";
      #       hash = "sha256-OVVm8IzrMBuTa5HAd2kO+U9662UbEhVT8gHJnCvUqnc=";
      #     };
      #   };
      # };
      # config = {
      #   theme = "catppucin-mocha";
      # };
    };
    broot = {
      enable = true;
      enableZshIntegration = true;
      settings = {
        syntax_theme = "MochaDark";
        imports = [
            {
                luma = "dark";
                file = "skins/catppuccin-mocha-mauve.hjson";
            }
        ];
      };
    };
    btop = {
      enable = true;
      settings = {
        # color_theme = "catppuccin_mocha";
        proc_tree = true;
      };
    };
    direnv = {
      enable = true;
      enableZshIntegration = true;
      nix-direnv.enable = true;
    };
    eza = {
      enable = true;
      enableZshIntegration = true;
      git = true;
      icons = "auto";
    };
    fd = {
      enable = true;
    };
    fzf = {
      enable = true;
      enableZshIntegration = true;
      # make fzf search hidden files too
      defaultCommand = "ag --hidden --ignore .git -g '' ";
    };
    jq = {
      enable = true;
    };
    jqp = {
      enable = true;
      settings = {
        theme.name = "catppuccin-mocha";
      };
    };
    navi = {
      enable = true;
      enableZshIntegration = true;
    };
    ripgrep = {
      enable = true;
      arguments = [
        "--max-columns-preview"
        "--pretty"
      ];
    };
    tealdeer = {
      enable = true;
      settings.updates.auto_update = true;
    };
    oh-my-posh = {
      enable = true;
      enableZshIntegration = true;
      settings = builtins.fromJSON (
        builtins.unsafeDiscardStringContext (
          builtins.readFile "/home/{{ .username }}/.config/oh-my-posh/catppuccin_mocha.omp.json"
        )
      );
    };
    # todo : some plugins are breaking it :(
    starship = {
      enable = false;
      enableZshIntegration = true;
      settings = (
        builtins.fromTOML (
          builtins.unsafeDiscardStringContext (
            builtins.readFile "/home/{{ .username }}/.config/starship/catppuccin.toml"
          )
        )
      );
    };
    zsh = {
      enable = true;
      autosuggestion = {
        enable = true;
        highlight = "fg=#6f6c5d";
      };
      history = {
        path = "$HOME/.histfile";
        save = 10000;
        size = 10000;
      };
      sessionVariables = {
        # ALT+E(dit) : fuzzy search for files to open in $EDITOR
        FZF_FINDER_EDITOR_BINDKEY = "^[e";
        # ALT+R(ead) : fuzzy search for files to open with default pager
        FZF_FINDER_PAGER_BINDKEY = "^[r";
        # make fzf finder plugin search hidden files too
        FZF_FINDER_FD_OPTS = "--hidden -t f";
        # print path before cding for zoxide
        _ZO_ECHO = 1;
        # forbid corepack from adding packageManager prop to package.json
        COREPACK_ENABLE_AUTO_PIN = "0";
        # eza theme
        EZA_COLORS = "$(vivid generate catppuccin-mocha)";
        # preserve prompt in nix shells
        NIX_SHELL_PRESERVE_PROMPT = "1";
      };
      shellAliases = {
        # HOME MANAGER
        hm = "home-manager";
        hms = "home-manager switch";
        # CHEZMOI
        cz = "chezmoi";
        cza = "chezmoi apply";
        czu = "chezmoi update";
        # SHELL TOOLS
        # eza is a maintained fork of exa
        exa = "eza";
        # compatibility fix for latest versions of eza  with zsh-exa
        # ls = "eza --group-directories-first --icons --color-scale all";
        # VS CODE
        c = "code";
        ci = "code-insiders";
        # zoxide
        cd = "z";
        # git
        lg = "lazygit";
        # just
        j = "just";
      };

      completionInit = ''
        autoload -Uz compinit
        compinit
        zinit cdreplay -q
      '';

      initContent = lib.mkMerge [
        # set some zsh options
        # autocd = cd into into directories without typing cd
        # extendedglob = enable advanced globbing
        # nomatch = don't throw an error if a glob doesn't match
        # notify = notify when a job completes
        # unset beep = disable the bell sound
        # then
        # init zinit and load plugins
        (lib.mkBefore ''
          setopt extendedglob nomatch notify
          unsetopt beep
          # init zinit
          source "${pkgs.zinit}/share/zinit/zinit.zsh"
          source $HOME/.plugins.zsh
        '')
        (lib.mkAfter ''
          if [[ -f ~/.secrets ]]; then
            source ~/.secrets
          fi
          if [[ -f ~/.profile ]]; then
            source ~/.profile
          fi
        '')
      ];
    };
    zoxide = {
      enable = true;
      enableZshIntegration = true;
    };
  };
}
