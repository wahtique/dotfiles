#compdef cast

autoload -U is-at-least

_cast() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_cast_commands" \
"*::: :->cast" \
&& ret=0
    case $state in
    (cast)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-command-$line[1]:"
        case $line[1] in
            (--max-int)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::type:' \
&& ret=0
;;
(--min-int)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::type:' \
&& ret=0
;;
(--max-uint)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::type:' \
&& ret=0
;;
(--address-zero)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(--hash-zero)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(--from-utf8)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::text:' \
&& ret=0
;;
(--concat-hex)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'*::data:' \
&& ret=0
;;
(--from-bin)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(--to-hexdata)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::input:' \
&& ret=0
;;
(--to-checksum-address)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::address:' \
&& ret=0
;;
(--to-ascii)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::hexdata:' \
&& ret=0
;;
(--from-fix)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::decimals:' \
'::value:' \
&& ret=0
;;
(--to-bytes32)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::bytes:' \
&& ret=0
;;
(--to-fix)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::decimals:' \
'::value:' \
&& ret=0
;;
(--to-uint256)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(--to-int256)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(shl)
_arguments "${_arguments_options[@]}" \
'--base-in=[The input base]:BASE_IN: ' \
'--base-out=[The output base]:BASE_OUT: ' \
'-h[Print help]' \
'--help[Print help]' \
':value:' \
':bits:' \
&& ret=0
;;
(shr)
_arguments "${_arguments_options[@]}" \
'--base-in=[The input base]:BASE_IN: ' \
'--base-out=[The output base]:BASE_OUT: ' \
'-h[Print help]' \
'--help[Print help]' \
':value:' \
':bits:' \
&& ret=0
;;
(--to-unit)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::value:' \
'::unit -- The unit to convert to (ether, gwei, wei).:' \
&& ret=0
;;
(--to-wei)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
'::unit:' \
&& ret=0
;;
(--from-wei)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
'::unit:' \
&& ret=0
;;
(--to-rlp)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(--from-rlp)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(--to-hex)
_arguments "${_arguments_options[@]}" \
'-i+[The input base]:BASE_IN: ' \
'--base-in=[The input base]:BASE_IN: ' \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(--to-dec)
_arguments "${_arguments_options[@]}" \
'-i+[The input base]:BASE_IN: ' \
'--base-in=[The input base]:BASE_IN: ' \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
&& ret=0
;;
(--to-base)
_arguments "${_arguments_options[@]}" \
'-i+[The input base]:BASE_IN: ' \
'--base-in=[The input base]:BASE_IN: ' \
'-h[Print help]' \
'--help[Print help]' \
'::value:' \
'::base_out -- The output base:' \
&& ret=0
;;
(access-list)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-j[]' \
'--json[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':address -- The destination of the transaction.:' \
':sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
&& ret=0
;;
(block)
_arguments "${_arguments_options[@]}" \
'-f+[If specified, only get the given field of the block.]:FIELD: ' \
'--field=[If specified, only get the given field of the block.]:FIELD: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--full[]' \
'-j[]' \
'--json[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::block -- The block height you want to query at.:' \
&& ret=0
;;
(block-number)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(call)
_arguments "${_arguments_options[@]}" \
'()--data=[Data for the transaction.]:DATA: ' \
'--gas-limit=[Gas limit for the transaction.]:GAS_LIMIT: ' \
'--gas-price=[Gas price for legacy transactions, or max fee per gas for EIP1559 transactions.]:PRICE: ' \
'--priority-gas-price=[Max priority fee per gas for EIP1559 transactions.]:PRICE: ' \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'--nonce=[Nonce for the transaction.]:NONCE: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'-f+[The sender account]:ADDRESS: ' \
'--from=[The sender account]:ADDRESS: ' \
'--private-key=[Use the provided private key]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path]:MNEMONIC: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file]:PATH: ' \
'--password=[The keystore password. Used with --keystore]:PASSWORD: ' \
'--password-file=[The keystore password file path. Used with --keystore]:PASSWORD_FILE: ' \
'-b+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'--legacy[Send a legacy transaction instead of an EIP1559 transaction.]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key]' \
'--interactive[Open an interactive prompt to enter your private key]' \
'-l[Use a Ledger hardware wallet]' \
'--ledger[Use a Ledger hardware wallet]' \
'-t[Use a Trezor hardware wallet]' \
'--trezor[Use a Trezor hardware wallet]' \
'--aws[Use AWS Key Management Service]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::to -- The destination of the transaction.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
":: :_cast__call_commands" \
"*::: :->call" \
&& ret=0

    case $state in
    (call)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-call-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':code -- Bytecode of contract.:' \
'::sig -- The signature of the constructor.:' \
'*::args -- Constructor arguments:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_cast__call__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-call-help-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(calldata)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':sig -- The function signature.:' \
'*::args:' \
&& ret=0
;;
(chain)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(chain-id)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(client)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(compute-address)
_arguments "${_arguments_options[@]}" \
'--nonce=[The nonce of the deployer address.]:NONCE: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
'::address -- The deployer address.:' \
&& ret=0
;;
(disassemble)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':bytecode -- The hex encoded bytecode:' \
&& ret=0
;;
(namehash)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::name:' \
&& ret=0
;;
(tx)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-j[]' \
'--json[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
':tx_hash:' \
'::field:' \
&& ret=0
;;
(receipt)
_arguments "${_arguments_options[@]}" \
'--confirmations=[The number of confirmations until the receipt is fetched]:CONFIRMATIONS: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--async[Exit immediately if the transaction was not found.]' \
'-j[]' \
'--json[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
':tx_hash:' \
'::field:' \
&& ret=0
;;
(send)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[Gas limit for the transaction.]:GAS_LIMIT: ' \
'--gas-price=[Gas price for legacy transactions, or max fee per gas for EIP1559 transactions.]:PRICE: ' \
'--priority-gas-price=[Max priority fee per gas for EIP1559 transactions.]:PRICE: ' \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'--nonce=[Nonce for the transaction.]:NONCE: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'-f+[The sender account]:ADDRESS: ' \
'--from=[The sender account]:ADDRESS: ' \
'--private-key=[Use the provided private key]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path]:MNEMONIC: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file]:PATH: ' \
'--password=[The keystore password. Used with --keystore]:PASSWORD: ' \
'--password-file=[The keystore password file path. Used with --keystore]:PASSWORD_FILE: ' \
'--confirmations=[The number of confirmations until the receipt is fetched.]:CONFIRMATIONS: ' \
'--async[Only print the transaction hash and exit immediately.]' \
'--legacy[Send a legacy transaction instead of an EIP1559 transaction.]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key]' \
'--interactive[Open an interactive prompt to enter your private key]' \
'-l[Use a Ledger hardware wallet]' \
'--ledger[Use a Ledger hardware wallet]' \
'-t[Use a Trezor hardware wallet]' \
'--trezor[Use a Trezor hardware wallet]' \
'--aws[Use AWS Key Management Service]' \
'-j[]' \
'--json[]' \
'(--nonce)--resend[Reuse the latest nonce for the sender account.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::to -- The destination of the transaction. If not provided, you must use cast send --create.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
":: :_cast__send_commands" \
"*::: :->send" \
&& ret=0

    case $state in
    (send)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-send-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':code -- Bytecode of contract.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_cast__send__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-send-help-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(publish)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--async[Only print the transaction hash and exit immediately.]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
':raw_tx -- The raw transaction:' \
&& ret=0
;;
(estimate)
_arguments "${_arguments_options[@]}" \
'-f+[The sender account]:FROM: ' \
'--from=[The sender account]:FROM: ' \
'--value=[Ether to send in the transaction]:VALUE: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::to -- The destination of the transaction:' \
'::sig -- The signature of the function to call:' \
'*::args -- The arguments of the function to call:' \
":: :_cast__estimate_commands" \
"*::: :->estimate" \
&& ret=0

    case $state in
    (estimate)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-estimate-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'--value=[Ether to send in the transaction]:VALUE: ' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':code -- The bytecode of contract:' \
'::sig -- The signature of the constructor:' \
'*::args -- Constructor arguments:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_cast__estimate__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-estimate-help-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(--calldata-decode)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':sig -- The function signature in the format `<name>(<in-types>)(<out-types>)`.:' \
':calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(--abi-decode)
_arguments "${_arguments_options[@]}" \
'-i[Decode input data.]' \
'--input[Decode input data.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':sig -- The function signature in the format `<name>(<in-types>)(<out-types>)`.:' \
':calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(abi-encode)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':sig -- The function signature.:' \
'*::args -- The arguments of the function.:' \
&& ret=0
;;
(index)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':key_type -- The mapping key type.:' \
':key -- The mapping key.:' \
':slot_number -- The storage slot of the mapping.:' \
&& ret=0
;;
(implementation)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':who -- The address you want to get the nonce for.:' \
&& ret=0
;;
(admin)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':who -- The address you want to get the nonce for.:' \
&& ret=0
;;
(4byte)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::selector -- The function selector.:' \
&& ret=0
;;
(4byte-decode)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(4byte-event)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::topic -- Topic 0:' \
&& ret=0
;;
(upload-signature)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::signatures -- The signatures to upload. Prefix with '\''function'\'', '\''event'\'', or '\''error'\''. Defaults to function if no prefix given. Can also take paths to contract artifact JSON.:' \
&& ret=0
;;
(pretty-calldata)
_arguments "${_arguments_options[@]}" \
'-o[Skip the https://sig.eth.samczsun.com lookup.]' \
'--offline[Skip the https://sig.eth.samczsun.com lookup.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::calldata -- The calldata.:' \
&& ret=0
;;
(age)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::block -- The block height you want to query at.:' \
&& ret=0
;;
(balance)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-e[]' \
'--ether[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':who -- The account you want to query:' \
&& ret=0
;;
(basefee)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::block -- The block height you want to query at.:' \
&& ret=0
;;
(code)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-d[]' \
'--disassemble[]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':who -- The contract address.:' \
&& ret=0
;;
(gas-price)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(sig-event)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::event_string:' \
&& ret=0
;;
(keccak)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::data:' \
&& ret=0
;;
(resolve-name)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-v[Perform a reverse lookup to verify that the name is correct.]' \
'--verify[Perform a reverse lookup to verify that the name is correct.]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
'::who -- The name to lookup.:' \
&& ret=0
;;
(lookup-address)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-v[Perform a normal lookup to verify that the address is correct.]' \
'--verify[Perform a normal lookup to verify that the address is correct.]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
'::who -- The account to perform the lookup for.:' \
&& ret=0
;;
(storage)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at]:BLOCK: ' \
'--block=[The block height you want to query at]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'*--libraries=[Set pre-linked libraries.]:LIBRARIES: ' \
'--evm-version=[The target EVM version.]:VERSION: ' \
'--optimizer-runs=[The number of optimizer runs.]:RUNS: ' \
'*--extra-output=[Extra output to include in the contract'\''s artifact]:SELECTOR: ' \
'*--extra-output-files=[Extra output to write to separate files]:SELECTOR: ' \
'*--ignored-error-codes=[Ignore solc warnings by error code.]:ERROR_CODES: ' \
'--use=[Specify the solc version, or a path to a local solc, to build with]:SOLC_VERSION: ' \
'--root=[The project'\''s root path.]:PATH:_files -/' \
'-C+[The contracts source directory.]:PATH:_files -/' \
'--contracts=[The contracts source directory.]:PATH:_files -/' \
'*-R+[The project'\''s remappings.]:REMAPPINGS: ' \
'*--remappings=[The project'\''s remappings.]:REMAPPINGS: ' \
'--remappings-env=[The project'\''s remappings from the environment.]:ENV: ' \
'--cache-path=[The path to the compiler cache.]:PATH:_files -/' \
'*--lib-paths=[The path to the library folder.]:PATH:_files -/' \
'--config-path=[Path to the config file.]:FILE:_files' \
'-o+[The path to the contract artifacts folder.]:PATH:_files -/' \
'--out=[The path to the contract artifacts folder.]:PATH:_files -/' \
'--revert-strings=[Revert string configuration. Possible values are "default", "strip" (remove), "debug" (Solidity-generated revert strings) and "verboseDebug"]:REVERT: ' \
'--build-info-path=[Output path to directory that build info files will be written to.]:PATH:_files -/' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'--force[Clear the cache and artifacts folder and recompile.]' \
'--optimize[Activate the Solidity optimizer.]' \
'--deny-warnings[Warnings will trigger a compiler error]' \
'--no-auto-detect[Do not auto-detect solc.]' \
'--offline[Do not access the network.]' \
'--via-ir[Use the Yul intermediate representation compilation pipeline.]' \
'(-C --contracts)--hardhat[Use the Hardhat-style project layout.]' \
'(-C --contracts)--hh[Use the Hardhat-style project layout.]' \
'--silent[Don'\''t print anything on startup.]' \
'--build-info[Generate build info files.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':address -- The contract address:' \
'::slot -- The storage slot number:' \
&& ret=0
;;
(proof)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':address -- The contract address.:' \
'*::slots -- The storage slot numbers (hex or decimal).:' \
&& ret=0
;;
(nonce)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':who -- The address you want to get the nonce for.:' \
&& ret=0
;;
(etherscan-source)
_arguments "${_arguments_options[@]}" \
'-d+[The output directory to expand source tree into.]:DIRECTORY:_files -/' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'-h[Print help]' \
'--help[Print help]' \
':address -- The contract'\''s address.:' \
&& ret=0
;;
(wallet)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
":: :_cast__wallet_commands" \
"*::: :->wallet" \
&& ret=0

    case $state in
    (wallet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-wallet-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'--unsafe-password=[Password for the JSON keystore in cleartext. This is UNSAFE to use and we recommend using the --password.]:PASSWORD: ' \
'(--unsafe-password)-p[Deprecated: prompting for a hidden password is now the default.
            Triggers a hidden password prompt for the JSON keystore.]' \
'(--unsafe-password)--password[Deprecated: prompting for a hidden password is now the default.
            Triggers a hidden password prompt for the JSON keystore.]' \
'-h[Print help]' \
'--help[Print help]' \
'::path -- If provided, then keypair will be written to an encrypted JSON keystore.:' \
&& ret=0
;;
(vanity)
_arguments "${_arguments_options[@]}" \
'--starts-with=[Prefix for the vanity address.]:HEX: ' \
'--ends-with=[Suffix for the vanity address.]:HEX: ' \
'--nonce=[Generate a vanity contract address created by the generated keypair with the specified nonce.]:NONCE: ' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(address)
_arguments "${_arguments_options[@]}" \
'-f+[The sender account]:ADDRESS: ' \
'--from=[The sender account]:ADDRESS: ' \
'--private-key=[Use the provided private key]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path]:MNEMONIC: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file]:PATH: ' \
'--password=[The keystore password. Used with --keystore]:PASSWORD: ' \
'--password-file=[The keystore password file path. Used with --keystore]:PASSWORD_FILE: ' \
'-i[Open an interactive prompt to enter your private key]' \
'--interactive[Open an interactive prompt to enter your private key]' \
'-l[Use a Ledger hardware wallet]' \
'--ledger[Use a Ledger hardware wallet]' \
'-t[Use a Trezor hardware wallet]' \
'--trezor[Use a Trezor hardware wallet]' \
'--aws[Use AWS Key Management Service]' \
'-h[Print help]' \
'--help[Print help]' \
'::private_key_override -- If provided, the address will be derived from the specified private key.:' \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
'-f+[The sender account]:ADDRESS: ' \
'--from=[The sender account]:ADDRESS: ' \
'--private-key=[Use the provided private key]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path]:MNEMONIC: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file]:PATH: ' \
'--password=[The keystore password. Used with --keystore]:PASSWORD: ' \
'--password-file=[The keystore password file path. Used with --keystore]:PASSWORD_FILE: ' \
'-i[Open an interactive prompt to enter your private key]' \
'--interactive[Open an interactive prompt to enter your private key]' \
'-l[Use a Ledger hardware wallet]' \
'--ledger[Use a Ledger hardware wallet]' \
'-t[Use a Trezor hardware wallet]' \
'--trezor[Use a Trezor hardware wallet]' \
'--aws[Use AWS Key Management Service]' \
'-h[Print help]' \
'--help[Print help]' \
':message -- message to sign. Messages starting with 0x are expected to be hex encoded, which get decoded before being signed:' \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" \
'-a+[The address of the message signer.]:ADDRESS: ' \
'--address=[The address of the message signer.]:ADDRESS: ' \
'-h[Print help]' \
'--help[Print help]' \
':message -- The original message.:' \
':signature -- The signature to verify.:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_cast__wallet__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-wallet-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(vanity)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(address)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(interface)
_arguments "${_arguments_options[@]}" \
'-n+[The name to use for the generated interface]:NAME: ' \
'--name=[The name to use for the generated interface]:NAME: ' \
'-p+[Solidity pragma version.]:VERSION: ' \
'--pragma=[Solidity pragma version.]:VERSION: ' \
'-o+[The path to the output file.]:PATH:_files' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':path_or_address -- The contract address, or the path to an ABI file.:' \
&& ret=0
;;
(bind)
_arguments "${_arguments_options[@]}" \
'-o+[Path to where bindings will be stored]:PATH:_files -/' \
'--output-dir=[Path to where bindings will be stored]:PATH:_files -/' \
'--crate-name=[The name of the Rust crate to generate]:NAME: ' \
'--crate-version=[The version of the Rust crate to generate]:VERSION: ' \
'-e+[The Etherscan (or equivalent) API key]:KEY: ' \
'--etherscan-api-key=[The Etherscan (or equivalent) API key]:KEY: ' \
'-c+[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--chain=[The chain name or EIP-155 chain ID]:CHAIN: ' \
'--separate-files[Generate bindings as separate files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':path_or_address -- The contract address, or the path to an ABI Directory:' \
&& ret=0
;;
(sig)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::sig -- The function signature, e.g. transfer(address,uint256).:' \
'::optimize -- Optimize signature to contain provided amount of leading zeroes in selector.:' \
&& ret=0
;;
(create2)
_arguments "${_arguments_options[@]}" \
'-s+[Prefix for the contract address.]:HEX: ' \
'--starts-with=[Prefix for the contract address.]:HEX: ' \
'-e+[Suffix for the contract address.]:HEX: ' \
'--ends-with=[Suffix for the contract address.]:HEX: ' \
'-m+[Sequence that the address has to match]:HEX: ' \
'--matching=[Sequence that the address has to match]:HEX: ' \
'-d+[Address of the contract deployer.]:ADDRESS: ' \
'--deployer=[Address of the contract deployer.]:ADDRESS: ' \
'-i+[Init code of the contract to be deployed.]:HEX: ' \
'--init-code=[Init code of the contract to be deployed.]:HEX: ' \
'--init-code-hash=[Init code hash the contract to be deployed.]:HEX: ' \
'-c[]' \
'--case-sensitive[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(find-block)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
':timestamp -- The UNIX timestamp to search for (in seconds):' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
':shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(generate-fig-spec)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'*--label=[Labels address in the trace. 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045:vitalik.eth]:LABEL: ' \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-d[Debugs the transaction.]' \
'--debug[Debugs the transaction.]' \
'-t[Print out opcode traces.]' \
'--trace-printer[Print out opcode traces.]' \
'-q[Executes the transaction only with the state from the previous block. May result in different results than the live execution!]' \
'--quick[Executes the transaction only with the state from the previous block. May result in different results than the live execution!]' \
'-v[Prints full address]' \
'--verbose[Prints full address]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help]' \
'--help[Print help]' \
':tx_hash -- The transaction hash.:' \
&& ret=0
;;
(rpc)
_arguments "${_arguments_options[@]}" \
'-r+[The RPC endpoint]:URL: ' \
'--rpc-url=[The RPC endpoint]:URL: ' \
'-w[Send raw JSON parameters]' \
'--raw[Send raw JSON parameters]' \
'--flashbots[Use the Flashbots RPC URL (https://rpc.flashbots.net)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':method -- RPC method name:' \
'*::params -- RPC parameters:' \
&& ret=0
;;
(--format-bytes32-string)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::string:' \
&& ret=0
;;
(--parse-bytes32-string)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'::bytes:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_cast__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-help-command-$line[1]:"
        case $line[1] in
            (--max-int)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--min-int)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--max-uint)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--address-zero)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--hash-zero)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--from-utf8)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--concat-hex)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--from-bin)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-hexdata)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-checksum-address)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-ascii)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--from-fix)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-bytes32)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-fix)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-uint256)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-int256)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(shl)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(shr)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-unit)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-wei)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--from-wei)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-rlp)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--from-rlp)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-hex)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-dec)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--to-base)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(access-list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(block)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(block-number)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(call)
_arguments "${_arguments_options[@]}" \
":: :_cast__help__call_commands" \
"*::: :->call" \
&& ret=0

    case $state in
    (call)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-help-call-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(calldata)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(chain)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(chain-id)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(client)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(compute-address)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(disassemble)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(namehash)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(tx)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(receipt)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(send)
_arguments "${_arguments_options[@]}" \
":: :_cast__help__send_commands" \
"*::: :->send" \
&& ret=0

    case $state in
    (send)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-help-send-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(publish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(estimate)
_arguments "${_arguments_options[@]}" \
":: :_cast__help__estimate_commands" \
"*::: :->estimate" \
&& ret=0

    case $state in
    (estimate)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-help-estimate-command-$line[1]:"
        case $line[1] in
            (--create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(--calldata-decode)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--abi-decode)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(abi-encode)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(index)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(implementation)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(admin)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(4byte)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(4byte-decode)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(4byte-event)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(upload-signature)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(pretty-calldata)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(age)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(balance)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(basefee)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(code)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(gas-price)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sig-event)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(keccak)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(resolve-name)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(lookup-address)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(storage)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proof)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(nonce)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(etherscan-source)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(wallet)
_arguments "${_arguments_options[@]}" \
":: :_cast__help__wallet_commands" \
"*::: :->wallet" \
&& ret=0

    case $state in
    (wallet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-help-wallet-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(vanity)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(address)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(interface)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(bind)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sig)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create2)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(find-block)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(generate-fig-spec)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rpc)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--format-bytes32-string)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(--parse-bytes32-string)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_cast_commands] )) ||
_cast_commands() {
    local commands; commands=(
'--max-int:Get the maximum value of the given integer type.' \
'max-int:Get the maximum value of the given integer type.' \
'maxi:Get the maximum value of the given integer type.' \
'--min-int:Get the minimum value of the given integer type.' \
'min-int:Get the minimum value of the given integer type.' \
'mini:Get the minimum value of the given integer type.' \
'--max-uint:Get the maximum value of the given integer type.' \
'max-uint:Get the maximum value of the given integer type.' \
'maxu:Get the maximum value of the given integer type.' \
'--address-zero:Get zero address' \
'address-zero:Get zero address' \
'az:Get zero address' \
'--hash-zero:Get zero hash' \
'hash-zero:Get zero hash' \
'hz:Get zero hash' \
'--from-utf8:Convert UTF8 text to hex.' \
'from-utf8:Convert UTF8 text to hex.' \
'--from-ascii:Convert UTF8 text to hex.' \
'from-ascii:Convert UTF8 text to hex.' \
'fu:Convert UTF8 text to hex.' \
'fa:Convert UTF8 text to hex.' \
'--concat-hex:Concatenate hex strings.' \
'concat-hex:Concatenate hex strings.' \
'ch:Concatenate hex strings.' \
'--from-bin:Convert binary data into hex data.' \
'from-bin:Convert binary data into hex data.' \
'fb:Convert binary data into hex data.' \
'--to-hexdata:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'to-hexdata:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'thd:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'2hd:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'--to-checksum-address:Convert an address to a checksummed format (EIP-55).' \
'to-checksum-address:Convert an address to a checksummed format (EIP-55).' \
'--to-checksum:Convert an address to a checksummed format (EIP-55).' \
'to-checksum:Convert an address to a checksummed format (EIP-55).' \
'ta:Convert an address to a checksummed format (EIP-55).' \
'2a:Convert an address to a checksummed format (EIP-55).' \
'--to-ascii:Convert hex data to an ASCII string.' \
'to-ascii:Convert hex data to an ASCII string.' \
'tas:Convert hex data to an ASCII string.' \
'2as:Convert hex data to an ASCII string.' \
'--from-fix:Convert a fixed point number into an integer.' \
'from-fix:Convert a fixed point number into an integer.' \
'ff:Convert a fixed point number into an integer.' \
'--to-bytes32:Right-pads hex data to 32 bytes.' \
'to-bytes32:Right-pads hex data to 32 bytes.' \
'tb:Right-pads hex data to 32 bytes.' \
'2b:Right-pads hex data to 32 bytes.' \
'--to-fix:Convert an integer into a fixed point number.' \
'to-fix:Convert an integer into a fixed point number.' \
'tf:Convert an integer into a fixed point number.' \
'2f:Convert an integer into a fixed point number.' \
'--to-uint256:Convert a number to a hex-encoded uint256.' \
'to-uint256:Convert a number to a hex-encoded uint256.' \
'tu:Convert a number to a hex-encoded uint256.' \
'2u:Convert a number to a hex-encoded uint256.' \
'--to-int256:Convert a number to a hex-encoded int256.' \
'to-int256:Convert a number to a hex-encoded int256.' \
'ti:Convert a number to a hex-encoded int256.' \
'2i:Convert a number to a hex-encoded int256.' \
'shl:Perform a left shifting operation' \
'shr:Perform a right shifting operation' \
'--to-unit:Convert an ETH amount into another unit (ether, gwei or wei).' \
'to-unit:Convert an ETH amount into another unit (ether, gwei or wei).' \
'tun:Convert an ETH amount into another unit (ether, gwei or wei).' \
'2un:Convert an ETH amount into another unit (ether, gwei or wei).' \
'--to-wei:Convert an ETH amount to wei. Consider using --to-unit.' \
'to-wei:Convert an ETH amount to wei. Consider using --to-unit.' \
'tw:Convert an ETH amount to wei. Consider using --to-unit.' \
'2w:Convert an ETH amount to wei. Consider using --to-unit.' \
'--from-wei:Convert wei into an ETH amount. Consider using --to-unit.' \
'from-wei:Convert wei into an ETH amount. Consider using --to-unit.' \
'fw:Convert wei into an ETH amount. Consider using --to-unit.' \
'--to-rlp:RLP encodes hex data, or an array of hex data' \
'--from-rlp:Decodes RLP encoded data. Input must be hexadecimal.' \
'--to-hex:Converts a number of one base to another' \
'to-hex:Converts a number of one base to another' \
'th:Converts a number of one base to another' \
'2h:Converts a number of one base to another' \
'--to-dec:Converts a number of one base to decimal' \
'to-dec:Converts a number of one base to decimal' \
'td:Converts a number of one base to decimal' \
'2d:Converts a number of one base to decimal' \
'--to-base:Converts a number of one base to another' \
'to-base:Converts a number of one base to another' \
'--to-radix:Converts a number of one base to another' \
'to-radix:Converts a number of one base to another' \
'tr:Converts a number of one base to another' \
'2r:Converts a number of one base to another' \
'access-list:Create an access list for a transaction.' \
'ac:Create an access list for a transaction.' \
'acl:Create an access list for a transaction.' \
'block:Get information about a block.' \
'bl:Get information about a block.' \
'block-number:Get the latest block number.' \
'bn:Get the latest block number.' \
'call:Perform a call on an account without publishing a transaction.' \
'c:Perform a call on an account without publishing a transaction.' \
'calldata:ABI-encode a function with arguments.' \
'cd:ABI-encode a function with arguments.' \
'chain:Get the symbolic name of the current chain.' \
'chain-id:Get the Ethereum chain ID.' \
'ci:Get the Ethereum chain ID.' \
'cid:Get the Ethereum chain ID.' \
'client:Get the current client version.' \
'cl:Get the current client version.' \
'compute-address:Compute the contract address from a given nonce and deployer address.' \
'ca:Compute the contract address from a given nonce and deployer address.' \
'disassemble:Disassembles hex encoded bytecode into individual / human readable opcodes' \
'da:Disassembles hex encoded bytecode into individual / human readable opcodes' \
'namehash:Calculate the ENS namehash of a name.' \
'na:Calculate the ENS namehash of a name.' \
'nh:Calculate the ENS namehash of a name.' \
'tx:Get information about a transaction.' \
't:Get information about a transaction.' \
'receipt:Get the transaction receipt for a transaction.' \
're:Get the transaction receipt for a transaction.' \
'send:Sign and publish a transaction.' \
's:Sign and publish a transaction.' \
'publish:Publish a raw transaction to the network.' \
'p:Publish a raw transaction to the network.' \
'estimate:Estimate the gas cost of a transaction.' \
'e:Estimate the gas cost of a transaction.' \
'--calldata-decode:Decode ABI-encoded input data.' \
'cdd:Decode ABI-encoded input data.' \
'--abi-decode:Decode ABI-encoded input or output data' \
'ad:Decode ABI-encoded input or output data' \
'abi-encode:ABI encode the given function argument, excluding the selector.' \
'ae:ABI encode the given function argument, excluding the selector.' \
'index:Compute the storage slot for an entry in a mapping.' \
'in:Compute the storage slot for an entry in a mapping.' \
'implementation:Fetch the EIP-1967 implementation account' \
'impl:Fetch the EIP-1967 implementation account' \
'admin:Fetch the EIP-1967 admin account' \
'adm:Fetch the EIP-1967 admin account' \
'4byte:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4b:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4byte-decode:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4d:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4bd:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4byte-event:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'4e:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'4be:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'upload-signature:Upload the given signatures to https://sig.eth.samczsun.com.' \
'ups:Upload the given signatures to https://sig.eth.samczsun.com.' \
'pretty-calldata:Pretty print calldata.' \
'pc:Pretty print calldata.' \
'age:Get the timestamp of a block.' \
'a:Get the timestamp of a block.' \
'balance:Get the balance of an account in wei.' \
'b:Get the balance of an account in wei.' \
'basefee:Get the basefee of a block.' \
'ba:Get the basefee of a block.' \
'fee:Get the basefee of a block.' \
'code:Get the bytecode of a contract.' \
'co:Get the bytecode of a contract.' \
'gas-price:Get the current gas price.' \
'g:Get the current gas price.' \
'sig-event:Generate event signatures from event string.' \
'se:Generate event signatures from event string.' \
'keccak:Hash arbitrary data using Keccak-256.' \
'k:Hash arbitrary data using Keccak-256.' \
'resolve-name:Perform an ENS lookup.' \
'rn:Perform an ENS lookup.' \
'lookup-address:Perform an ENS reverse lookup.' \
'l:Perform an ENS reverse lookup.' \
'storage:Get the raw value of a contract'\''s storage slot.' \
'st:Get the raw value of a contract'\''s storage slot.' \
'proof:Generate a storage proof for a given storage slot.' \
'pr:Generate a storage proof for a given storage slot.' \
'nonce:Get the nonce for an account.' \
'n:Get the nonce for an account.' \
'etherscan-source:Get the source code of a contract from Etherscan.' \
'et:Get the source code of a contract from Etherscan.' \
'src:Get the source code of a contract from Etherscan.' \
'wallet:Wallet management utilities.' \
'w:Wallet management utilities.' \
'interface:Generate a Solidity interface from a given ABI.' \
'i:Generate a Solidity interface from a given ABI.' \
'bind:Generate a rust binding from a given ABI.' \
'bi:Generate a rust binding from a given ABI.' \
'sig:Get the selector for a function.' \
'si:Get the selector for a function.' \
'create2:Generate a deterministic contract address using CREATE2' \
'c2:Generate a deterministic contract address using CREATE2' \
'find-block:Get the block number closest to the provided timestamp.' \
'f:Get the block number closest to the provided timestamp.' \
'completions:Generate shell completions script' \
'com:Generate shell completions script' \
'generate-fig-spec:Generate Fig autocompletion spec.' \
'fig:Generate Fig autocompletion spec.' \
'run:Runs a published transaction in a local environment and prints the trace.' \
'r:Runs a published transaction in a local environment and prints the trace.' \
'rpc:Perform a raw JSON-RPC request' \
'rp:Perform a raw JSON-RPC request' \
'--format-bytes32-string:Formats a string into bytes32 encoding.' \
'--parse-bytes32-string:Parses a string from bytes32 encoding.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast commands' commands "$@"
}
(( $+functions[_cast__--abi-decode_commands] )) ||
_cast__--abi-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast --abi-decode commands' commands "$@"
}
(( $+functions[_cast__help__--abi-decode_commands] )) ||
_cast__help__--abi-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --abi-decode commands' commands "$@"
}
(( $+functions[_cast__--address-zero_commands] )) ||
_cast__--address-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast --address-zero commands' commands "$@"
}
(( $+functions[_cast__help__--address-zero_commands] )) ||
_cast__help__--address-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --address-zero commands' commands "$@"
}
(( $+functions[_cast__--calldata-decode_commands] )) ||
_cast__--calldata-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast --calldata-decode commands' commands "$@"
}
(( $+functions[_cast__help__--calldata-decode_commands] )) ||
_cast__help__--calldata-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --calldata-decode commands' commands "$@"
}
(( $+functions[_cast__--concat-hex_commands] )) ||
_cast__--concat-hex_commands() {
    local commands; commands=()
    _describe -t commands 'cast --concat-hex commands' commands "$@"
}
(( $+functions[_cast__help__--concat-hex_commands] )) ||
_cast__help__--concat-hex_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --concat-hex commands' commands "$@"
}
(( $+functions[_cast__call__--create_commands] )) ||
_cast__call__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast call --create commands' commands "$@"
}
(( $+functions[_cast__call__help__--create_commands] )) ||
_cast__call__help__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast call help --create commands' commands "$@"
}
(( $+functions[_cast__estimate__--create_commands] )) ||
_cast__estimate__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast estimate --create commands' commands "$@"
}
(( $+functions[_cast__estimate__help__--create_commands] )) ||
_cast__estimate__help__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast estimate help --create commands' commands "$@"
}
(( $+functions[_cast__help__call__--create_commands] )) ||
_cast__help__call__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast help call --create commands' commands "$@"
}
(( $+functions[_cast__help__estimate__--create_commands] )) ||
_cast__help__estimate__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast help estimate --create commands' commands "$@"
}
(( $+functions[_cast__help__send__--create_commands] )) ||
_cast__help__send__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast help send --create commands' commands "$@"
}
(( $+functions[_cast__send__--create_commands] )) ||
_cast__send__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast send --create commands' commands "$@"
}
(( $+functions[_cast__send__help__--create_commands] )) ||
_cast__send__help__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast send help --create commands' commands "$@"
}
(( $+functions[_cast__--format-bytes32-string_commands] )) ||
_cast__--format-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast --format-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__help__--format-bytes32-string_commands] )) ||
_cast__help__--format-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --format-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__--from-bin_commands] )) ||
_cast__--from-bin_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-bin commands' commands "$@"
}
(( $+functions[_cast__help__--from-bin_commands] )) ||
_cast__help__--from-bin_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --from-bin commands' commands "$@"
}
(( $+functions[_cast__--from-fix_commands] )) ||
_cast__--from-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-fix commands' commands "$@"
}
(( $+functions[_cast__help__--from-fix_commands] )) ||
_cast__help__--from-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --from-fix commands' commands "$@"
}
(( $+functions[_cast__--from-rlp_commands] )) ||
_cast__--from-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-rlp commands' commands "$@"
}
(( $+functions[_cast__help__--from-rlp_commands] )) ||
_cast__help__--from-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --from-rlp commands' commands "$@"
}
(( $+functions[_cast__--from-utf8_commands] )) ||
_cast__--from-utf8_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-utf8 commands' commands "$@"
}
(( $+functions[_cast__help__--from-utf8_commands] )) ||
_cast__help__--from-utf8_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --from-utf8 commands' commands "$@"
}
(( $+functions[_cast__--from-wei_commands] )) ||
_cast__--from-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-wei commands' commands "$@"
}
(( $+functions[_cast__help__--from-wei_commands] )) ||
_cast__help__--from-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --from-wei commands' commands "$@"
}
(( $+functions[_cast__--hash-zero_commands] )) ||
_cast__--hash-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast --hash-zero commands' commands "$@"
}
(( $+functions[_cast__help__--hash-zero_commands] )) ||
_cast__help__--hash-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --hash-zero commands' commands "$@"
}
(( $+functions[_cast__--max-int_commands] )) ||
_cast__--max-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast --max-int commands' commands "$@"
}
(( $+functions[_cast__help__--max-int_commands] )) ||
_cast__help__--max-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --max-int commands' commands "$@"
}
(( $+functions[_cast__--max-uint_commands] )) ||
_cast__--max-uint_commands() {
    local commands; commands=()
    _describe -t commands 'cast --max-uint commands' commands "$@"
}
(( $+functions[_cast__help__--max-uint_commands] )) ||
_cast__help__--max-uint_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --max-uint commands' commands "$@"
}
(( $+functions[_cast__--min-int_commands] )) ||
_cast__--min-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast --min-int commands' commands "$@"
}
(( $+functions[_cast__help__--min-int_commands] )) ||
_cast__help__--min-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --min-int commands' commands "$@"
}
(( $+functions[_cast__--parse-bytes32-string_commands] )) ||
_cast__--parse-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast --parse-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__help__--parse-bytes32-string_commands] )) ||
_cast__help__--parse-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --parse-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__--to-ascii_commands] )) ||
_cast__--to-ascii_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-ascii commands' commands "$@"
}
(( $+functions[_cast__help__--to-ascii_commands] )) ||
_cast__help__--to-ascii_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-ascii commands' commands "$@"
}
(( $+functions[_cast__--to-base_commands] )) ||
_cast__--to-base_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-base commands' commands "$@"
}
(( $+functions[_cast__help__--to-base_commands] )) ||
_cast__help__--to-base_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-base commands' commands "$@"
}
(( $+functions[_cast__--to-bytes32_commands] )) ||
_cast__--to-bytes32_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-bytes32 commands' commands "$@"
}
(( $+functions[_cast__help__--to-bytes32_commands] )) ||
_cast__help__--to-bytes32_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-bytes32 commands' commands "$@"
}
(( $+functions[_cast__--to-checksum-address_commands] )) ||
_cast__--to-checksum-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-checksum-address commands' commands "$@"
}
(( $+functions[_cast__help__--to-checksum-address_commands] )) ||
_cast__help__--to-checksum-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-checksum-address commands' commands "$@"
}
(( $+functions[_cast__--to-dec_commands] )) ||
_cast__--to-dec_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-dec commands' commands "$@"
}
(( $+functions[_cast__help__--to-dec_commands] )) ||
_cast__help__--to-dec_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-dec commands' commands "$@"
}
(( $+functions[_cast__--to-fix_commands] )) ||
_cast__--to-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-fix commands' commands "$@"
}
(( $+functions[_cast__help__--to-fix_commands] )) ||
_cast__help__--to-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-fix commands' commands "$@"
}
(( $+functions[_cast__--to-hex_commands] )) ||
_cast__--to-hex_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-hex commands' commands "$@"
}
(( $+functions[_cast__help__--to-hex_commands] )) ||
_cast__help__--to-hex_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-hex commands' commands "$@"
}
(( $+functions[_cast__--to-hexdata_commands] )) ||
_cast__--to-hexdata_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-hexdata commands' commands "$@"
}
(( $+functions[_cast__help__--to-hexdata_commands] )) ||
_cast__help__--to-hexdata_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-hexdata commands' commands "$@"
}
(( $+functions[_cast__--to-int256_commands] )) ||
_cast__--to-int256_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-int256 commands' commands "$@"
}
(( $+functions[_cast__help__--to-int256_commands] )) ||
_cast__help__--to-int256_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-int256 commands' commands "$@"
}
(( $+functions[_cast__--to-rlp_commands] )) ||
_cast__--to-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-rlp commands' commands "$@"
}
(( $+functions[_cast__help__--to-rlp_commands] )) ||
_cast__help__--to-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-rlp commands' commands "$@"
}
(( $+functions[_cast__--to-uint256_commands] )) ||
_cast__--to-uint256_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-uint256 commands' commands "$@"
}
(( $+functions[_cast__help__--to-uint256_commands] )) ||
_cast__help__--to-uint256_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-uint256 commands' commands "$@"
}
(( $+functions[_cast__--to-unit_commands] )) ||
_cast__--to-unit_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-unit commands' commands "$@"
}
(( $+functions[_cast__help__--to-unit_commands] )) ||
_cast__help__--to-unit_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-unit commands' commands "$@"
}
(( $+functions[_cast__--to-wei_commands] )) ||
_cast__--to-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-wei commands' commands "$@"
}
(( $+functions[_cast__help__--to-wei_commands] )) ||
_cast__help__--to-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast help --to-wei commands' commands "$@"
}
(( $+functions[_cast__4byte_commands] )) ||
_cast__4byte_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte commands' commands "$@"
}
(( $+functions[_cast__help__4byte_commands] )) ||
_cast__help__4byte_commands() {
    local commands; commands=()
    _describe -t commands 'cast help 4byte commands' commands "$@"
}
(( $+functions[_cast__4byte-decode_commands] )) ||
_cast__4byte-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte-decode commands' commands "$@"
}
(( $+functions[_cast__help__4byte-decode_commands] )) ||
_cast__help__4byte-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast help 4byte-decode commands' commands "$@"
}
(( $+functions[_cast__4byte-event_commands] )) ||
_cast__4byte-event_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte-event commands' commands "$@"
}
(( $+functions[_cast__help__4byte-event_commands] )) ||
_cast__help__4byte-event_commands() {
    local commands; commands=()
    _describe -t commands 'cast help 4byte-event commands' commands "$@"
}
(( $+functions[_cast__abi-encode_commands] )) ||
_cast__abi-encode_commands() {
    local commands; commands=()
    _describe -t commands 'cast abi-encode commands' commands "$@"
}
(( $+functions[_cast__help__abi-encode_commands] )) ||
_cast__help__abi-encode_commands() {
    local commands; commands=()
    _describe -t commands 'cast help abi-encode commands' commands "$@"
}
(( $+functions[_cast__access-list_commands] )) ||
_cast__access-list_commands() {
    local commands; commands=()
    _describe -t commands 'cast access-list commands' commands "$@"
}
(( $+functions[_cast__help__access-list_commands] )) ||
_cast__help__access-list_commands() {
    local commands; commands=()
    _describe -t commands 'cast help access-list commands' commands "$@"
}
(( $+functions[_cast__help__wallet__address_commands] )) ||
_cast__help__wallet__address_commands() {
    local commands; commands=()
    _describe -t commands 'cast help wallet address commands' commands "$@"
}
(( $+functions[_cast__wallet__address_commands] )) ||
_cast__wallet__address_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet address commands' commands "$@"
}
(( $+functions[_cast__wallet__help__address_commands] )) ||
_cast__wallet__help__address_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help address commands' commands "$@"
}
(( $+functions[_cast__admin_commands] )) ||
_cast__admin_commands() {
    local commands; commands=()
    _describe -t commands 'cast admin commands' commands "$@"
}
(( $+functions[_cast__help__admin_commands] )) ||
_cast__help__admin_commands() {
    local commands; commands=()
    _describe -t commands 'cast help admin commands' commands "$@"
}
(( $+functions[_cast__age_commands] )) ||
_cast__age_commands() {
    local commands; commands=()
    _describe -t commands 'cast age commands' commands "$@"
}
(( $+functions[_cast__help__age_commands] )) ||
_cast__help__age_commands() {
    local commands; commands=()
    _describe -t commands 'cast help age commands' commands "$@"
}
(( $+functions[_cast__balance_commands] )) ||
_cast__balance_commands() {
    local commands; commands=()
    _describe -t commands 'cast balance commands' commands "$@"
}
(( $+functions[_cast__help__balance_commands] )) ||
_cast__help__balance_commands() {
    local commands; commands=()
    _describe -t commands 'cast help balance commands' commands "$@"
}
(( $+functions[_cast__basefee_commands] )) ||
_cast__basefee_commands() {
    local commands; commands=()
    _describe -t commands 'cast basefee commands' commands "$@"
}
(( $+functions[_cast__help__basefee_commands] )) ||
_cast__help__basefee_commands() {
    local commands; commands=()
    _describe -t commands 'cast help basefee commands' commands "$@"
}
(( $+functions[_cast__bind_commands] )) ||
_cast__bind_commands() {
    local commands; commands=()
    _describe -t commands 'cast bind commands' commands "$@"
}
(( $+functions[_cast__help__bind_commands] )) ||
_cast__help__bind_commands() {
    local commands; commands=()
    _describe -t commands 'cast help bind commands' commands "$@"
}
(( $+functions[_cast__block_commands] )) ||
_cast__block_commands() {
    local commands; commands=()
    _describe -t commands 'cast block commands' commands "$@"
}
(( $+functions[_cast__help__block_commands] )) ||
_cast__help__block_commands() {
    local commands; commands=()
    _describe -t commands 'cast help block commands' commands "$@"
}
(( $+functions[_cast__block-number_commands] )) ||
_cast__block-number_commands() {
    local commands; commands=()
    _describe -t commands 'cast block-number commands' commands "$@"
}
(( $+functions[_cast__help__block-number_commands] )) ||
_cast__help__block-number_commands() {
    local commands; commands=()
    _describe -t commands 'cast help block-number commands' commands "$@"
}
(( $+functions[_cast__call_commands] )) ||
_cast__call_commands() {
    local commands; commands=(
'--create:Simulate a contract deployment.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast call commands' commands "$@"
}
(( $+functions[_cast__help__call_commands] )) ||
_cast__help__call_commands() {
    local commands; commands=(
'--create:Simulate a contract deployment.' \
    )
    _describe -t commands 'cast help call commands' commands "$@"
}
(( $+functions[_cast__calldata_commands] )) ||
_cast__calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast calldata commands' commands "$@"
}
(( $+functions[_cast__help__calldata_commands] )) ||
_cast__help__calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast help calldata commands' commands "$@"
}
(( $+functions[_cast__chain_commands] )) ||
_cast__chain_commands() {
    local commands; commands=()
    _describe -t commands 'cast chain commands' commands "$@"
}
(( $+functions[_cast__help__chain_commands] )) ||
_cast__help__chain_commands() {
    local commands; commands=()
    _describe -t commands 'cast help chain commands' commands "$@"
}
(( $+functions[_cast__chain-id_commands] )) ||
_cast__chain-id_commands() {
    local commands; commands=()
    _describe -t commands 'cast chain-id commands' commands "$@"
}
(( $+functions[_cast__help__chain-id_commands] )) ||
_cast__help__chain-id_commands() {
    local commands; commands=()
    _describe -t commands 'cast help chain-id commands' commands "$@"
}
(( $+functions[_cast__client_commands] )) ||
_cast__client_commands() {
    local commands; commands=()
    _describe -t commands 'cast client commands' commands "$@"
}
(( $+functions[_cast__help__client_commands] )) ||
_cast__help__client_commands() {
    local commands; commands=()
    _describe -t commands 'cast help client commands' commands "$@"
}
(( $+functions[_cast__code_commands] )) ||
_cast__code_commands() {
    local commands; commands=()
    _describe -t commands 'cast code commands' commands "$@"
}
(( $+functions[_cast__help__code_commands] )) ||
_cast__help__code_commands() {
    local commands; commands=()
    _describe -t commands 'cast help code commands' commands "$@"
}
(( $+functions[_cast__completions_commands] )) ||
_cast__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cast completions commands' commands "$@"
}
(( $+functions[_cast__help__completions_commands] )) ||
_cast__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cast help completions commands' commands "$@"
}
(( $+functions[_cast__compute-address_commands] )) ||
_cast__compute-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast compute-address commands' commands "$@"
}
(( $+functions[_cast__help__compute-address_commands] )) ||
_cast__help__compute-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast help compute-address commands' commands "$@"
}
(( $+functions[_cast__create2_commands] )) ||
_cast__create2_commands() {
    local commands; commands=()
    _describe -t commands 'cast create2 commands' commands "$@"
}
(( $+functions[_cast__help__create2_commands] )) ||
_cast__help__create2_commands() {
    local commands; commands=()
    _describe -t commands 'cast help create2 commands' commands "$@"
}
(( $+functions[_cast__disassemble_commands] )) ||
_cast__disassemble_commands() {
    local commands; commands=()
    _describe -t commands 'cast disassemble commands' commands "$@"
}
(( $+functions[_cast__help__disassemble_commands] )) ||
_cast__help__disassemble_commands() {
    local commands; commands=()
    _describe -t commands 'cast help disassemble commands' commands "$@"
}
(( $+functions[_cast__estimate_commands] )) ||
_cast__estimate_commands() {
    local commands; commands=(
'--create:Estimate gas cost to deploy a smart contract' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast estimate commands' commands "$@"
}
(( $+functions[_cast__help__estimate_commands] )) ||
_cast__help__estimate_commands() {
    local commands; commands=(
'--create:Estimate gas cost to deploy a smart contract' \
    )
    _describe -t commands 'cast help estimate commands' commands "$@"
}
(( $+functions[_cast__etherscan-source_commands] )) ||
_cast__etherscan-source_commands() {
    local commands; commands=()
    _describe -t commands 'cast etherscan-source commands' commands "$@"
}
(( $+functions[_cast__help__etherscan-source_commands] )) ||
_cast__help__etherscan-source_commands() {
    local commands; commands=()
    _describe -t commands 'cast help etherscan-source commands' commands "$@"
}
(( $+functions[_cast__find-block_commands] )) ||
_cast__find-block_commands() {
    local commands; commands=()
    _describe -t commands 'cast find-block commands' commands "$@"
}
(( $+functions[_cast__help__find-block_commands] )) ||
_cast__help__find-block_commands() {
    local commands; commands=()
    _describe -t commands 'cast help find-block commands' commands "$@"
}
(( $+functions[_cast__gas-price_commands] )) ||
_cast__gas-price_commands() {
    local commands; commands=()
    _describe -t commands 'cast gas-price commands' commands "$@"
}
(( $+functions[_cast__help__gas-price_commands] )) ||
_cast__help__gas-price_commands() {
    local commands; commands=()
    _describe -t commands 'cast help gas-price commands' commands "$@"
}
(( $+functions[_cast__generate-fig-spec_commands] )) ||
_cast__generate-fig-spec_commands() {
    local commands; commands=()
    _describe -t commands 'cast generate-fig-spec commands' commands "$@"
}
(( $+functions[_cast__help__generate-fig-spec_commands] )) ||
_cast__help__generate-fig-spec_commands() {
    local commands; commands=()
    _describe -t commands 'cast help generate-fig-spec commands' commands "$@"
}
(( $+functions[_cast__call__help_commands] )) ||
_cast__call__help_commands() {
    local commands; commands=(
'--create:Simulate a contract deployment.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast call help commands' commands "$@"
}
(( $+functions[_cast__call__help__help_commands] )) ||
_cast__call__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast call help help commands' commands "$@"
}
(( $+functions[_cast__estimate__help_commands] )) ||
_cast__estimate__help_commands() {
    local commands; commands=(
'--create:Estimate gas cost to deploy a smart contract' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast estimate help commands' commands "$@"
}
(( $+functions[_cast__estimate__help__help_commands] )) ||
_cast__estimate__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast estimate help help commands' commands "$@"
}
(( $+functions[_cast__help_commands] )) ||
_cast__help_commands() {
    local commands; commands=(
'--max-int:Get the maximum value of the given integer type.' \
'--min-int:Get the minimum value of the given integer type.' \
'--max-uint:Get the maximum value of the given integer type.' \
'--address-zero:Get zero address' \
'--hash-zero:Get zero hash' \
'--from-utf8:Convert UTF8 text to hex.' \
'--concat-hex:Concatenate hex strings.' \
'--from-bin:Convert binary data into hex data.' \
'--to-hexdata:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'--to-checksum-address:Convert an address to a checksummed format (EIP-55).' \
'--to-ascii:Convert hex data to an ASCII string.' \
'--from-fix:Convert a fixed point number into an integer.' \
'--to-bytes32:Right-pads hex data to 32 bytes.' \
'--to-fix:Convert an integer into a fixed point number.' \
'--to-uint256:Convert a number to a hex-encoded uint256.' \
'--to-int256:Convert a number to a hex-encoded int256.' \
'shl:Perform a left shifting operation' \
'shr:Perform a right shifting operation' \
'--to-unit:Convert an ETH amount into another unit (ether, gwei or wei).' \
'--to-wei:Convert an ETH amount to wei. Consider using --to-unit.' \
'--from-wei:Convert wei into an ETH amount. Consider using --to-unit.' \
'--to-rlp:RLP encodes hex data, or an array of hex data' \
'--from-rlp:Decodes RLP encoded data. Input must be hexadecimal.' \
'--to-hex:Converts a number of one base to another' \
'--to-dec:Converts a number of one base to decimal' \
'--to-base:Converts a number of one base to another' \
'access-list:Create an access list for a transaction.' \
'block:Get information about a block.' \
'block-number:Get the latest block number.' \
'call:Perform a call on an account without publishing a transaction.' \
'calldata:ABI-encode a function with arguments.' \
'chain:Get the symbolic name of the current chain.' \
'chain-id:Get the Ethereum chain ID.' \
'client:Get the current client version.' \
'compute-address:Compute the contract address from a given nonce and deployer address.' \
'disassemble:Disassembles hex encoded bytecode into individual / human readable opcodes' \
'namehash:Calculate the ENS namehash of a name.' \
'tx:Get information about a transaction.' \
'receipt:Get the transaction receipt for a transaction.' \
'send:Sign and publish a transaction.' \
'publish:Publish a raw transaction to the network.' \
'estimate:Estimate the gas cost of a transaction.' \
'--calldata-decode:Decode ABI-encoded input data.' \
'--abi-decode:Decode ABI-encoded input or output data' \
'abi-encode:ABI encode the given function argument, excluding the selector.' \
'index:Compute the storage slot for an entry in a mapping.' \
'implementation:Fetch the EIP-1967 implementation account' \
'admin:Fetch the EIP-1967 admin account' \
'4byte:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4byte-decode:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4byte-event:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'upload-signature:Upload the given signatures to https://sig.eth.samczsun.com.' \
'pretty-calldata:Pretty print calldata.' \
'age:Get the timestamp of a block.' \
'balance:Get the balance of an account in wei.' \
'basefee:Get the basefee of a block.' \
'code:Get the bytecode of a contract.' \
'gas-price:Get the current gas price.' \
'sig-event:Generate event signatures from event string.' \
'keccak:Hash arbitrary data using Keccak-256.' \
'resolve-name:Perform an ENS lookup.' \
'lookup-address:Perform an ENS reverse lookup.' \
'storage:Get the raw value of a contract'\''s storage slot.' \
'proof:Generate a storage proof for a given storage slot.' \
'nonce:Get the nonce for an account.' \
'etherscan-source:Get the source code of a contract from Etherscan.' \
'wallet:Wallet management utilities.' \
'interface:Generate a Solidity interface from a given ABI.' \
'bind:Generate a rust binding from a given ABI.' \
'sig:Get the selector for a function.' \
'create2:Generate a deterministic contract address using CREATE2' \
'find-block:Get the block number closest to the provided timestamp.' \
'completions:Generate shell completions script' \
'generate-fig-spec:Generate Fig autocompletion spec.' \
'run:Runs a published transaction in a local environment and prints the trace.' \
'rpc:Perform a raw JSON-RPC request' \
'--format-bytes32-string:Formats a string into bytes32 encoding.' \
'--parse-bytes32-string:Parses a string from bytes32 encoding.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast help commands' commands "$@"
}
(( $+functions[_cast__help__help_commands] )) ||
_cast__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast help help commands' commands "$@"
}
(( $+functions[_cast__send__help_commands] )) ||
_cast__send__help_commands() {
    local commands; commands=(
'--create:Use to deploy raw contract bytecode' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast send help commands' commands "$@"
}
(( $+functions[_cast__send__help__help_commands] )) ||
_cast__send__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast send help help commands' commands "$@"
}
(( $+functions[_cast__wallet__help_commands] )) ||
_cast__wallet__help_commands() {
    local commands; commands=(
'new:Create a new random keypair.' \
'vanity:Generate a vanity address.' \
'address:Convert a private key to an address.' \
'sign:Sign a message.' \
'verify:Verify the signature of a message.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast wallet help commands' commands "$@"
}
(( $+functions[_cast__wallet__help__help_commands] )) ||
_cast__wallet__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help help commands' commands "$@"
}
(( $+functions[_cast__help__implementation_commands] )) ||
_cast__help__implementation_commands() {
    local commands; commands=()
    _describe -t commands 'cast help implementation commands' commands "$@"
}
(( $+functions[_cast__implementation_commands] )) ||
_cast__implementation_commands() {
    local commands; commands=()
    _describe -t commands 'cast implementation commands' commands "$@"
}
(( $+functions[_cast__help__index_commands] )) ||
_cast__help__index_commands() {
    local commands; commands=()
    _describe -t commands 'cast help index commands' commands "$@"
}
(( $+functions[_cast__index_commands] )) ||
_cast__index_commands() {
    local commands; commands=()
    _describe -t commands 'cast index commands' commands "$@"
}
(( $+functions[_cast__help__interface_commands] )) ||
_cast__help__interface_commands() {
    local commands; commands=()
    _describe -t commands 'cast help interface commands' commands "$@"
}
(( $+functions[_cast__interface_commands] )) ||
_cast__interface_commands() {
    local commands; commands=()
    _describe -t commands 'cast interface commands' commands "$@"
}
(( $+functions[_cast__help__keccak_commands] )) ||
_cast__help__keccak_commands() {
    local commands; commands=()
    _describe -t commands 'cast help keccak commands' commands "$@"
}
(( $+functions[_cast__keccak_commands] )) ||
_cast__keccak_commands() {
    local commands; commands=()
    _describe -t commands 'cast keccak commands' commands "$@"
}
(( $+functions[_cast__help__lookup-address_commands] )) ||
_cast__help__lookup-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast help lookup-address commands' commands "$@"
}
(( $+functions[_cast__lookup-address_commands] )) ||
_cast__lookup-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast lookup-address commands' commands "$@"
}
(( $+functions[_cast__help__namehash_commands] )) ||
_cast__help__namehash_commands() {
    local commands; commands=()
    _describe -t commands 'cast help namehash commands' commands "$@"
}
(( $+functions[_cast__namehash_commands] )) ||
_cast__namehash_commands() {
    local commands; commands=()
    _describe -t commands 'cast namehash commands' commands "$@"
}
(( $+functions[_cast__help__wallet__new_commands] )) ||
_cast__help__wallet__new_commands() {
    local commands; commands=()
    _describe -t commands 'cast help wallet new commands' commands "$@"
}
(( $+functions[_cast__wallet__help__new_commands] )) ||
_cast__wallet__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help new commands' commands "$@"
}
(( $+functions[_cast__wallet__new_commands] )) ||
_cast__wallet__new_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet new commands' commands "$@"
}
(( $+functions[_cast__help__nonce_commands] )) ||
_cast__help__nonce_commands() {
    local commands; commands=()
    _describe -t commands 'cast help nonce commands' commands "$@"
}
(( $+functions[_cast__nonce_commands] )) ||
_cast__nonce_commands() {
    local commands; commands=()
    _describe -t commands 'cast nonce commands' commands "$@"
}
(( $+functions[_cast__help__pretty-calldata_commands] )) ||
_cast__help__pretty-calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast help pretty-calldata commands' commands "$@"
}
(( $+functions[_cast__pretty-calldata_commands] )) ||
_cast__pretty-calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast pretty-calldata commands' commands "$@"
}
(( $+functions[_cast__help__proof_commands] )) ||
_cast__help__proof_commands() {
    local commands; commands=()
    _describe -t commands 'cast help proof commands' commands "$@"
}
(( $+functions[_cast__proof_commands] )) ||
_cast__proof_commands() {
    local commands; commands=()
    _describe -t commands 'cast proof commands' commands "$@"
}
(( $+functions[_cast__help__publish_commands] )) ||
_cast__help__publish_commands() {
    local commands; commands=()
    _describe -t commands 'cast help publish commands' commands "$@"
}
(( $+functions[_cast__publish_commands] )) ||
_cast__publish_commands() {
    local commands; commands=()
    _describe -t commands 'cast publish commands' commands "$@"
}
(( $+functions[_cast__help__receipt_commands] )) ||
_cast__help__receipt_commands() {
    local commands; commands=()
    _describe -t commands 'cast help receipt commands' commands "$@"
}
(( $+functions[_cast__receipt_commands] )) ||
_cast__receipt_commands() {
    local commands; commands=()
    _describe -t commands 'cast receipt commands' commands "$@"
}
(( $+functions[_cast__help__resolve-name_commands] )) ||
_cast__help__resolve-name_commands() {
    local commands; commands=()
    _describe -t commands 'cast help resolve-name commands' commands "$@"
}
(( $+functions[_cast__resolve-name_commands] )) ||
_cast__resolve-name_commands() {
    local commands; commands=()
    _describe -t commands 'cast resolve-name commands' commands "$@"
}
(( $+functions[_cast__help__rpc_commands] )) ||
_cast__help__rpc_commands() {
    local commands; commands=()
    _describe -t commands 'cast help rpc commands' commands "$@"
}
(( $+functions[_cast__rpc_commands] )) ||
_cast__rpc_commands() {
    local commands; commands=()
    _describe -t commands 'cast rpc commands' commands "$@"
}
(( $+functions[_cast__help__run_commands] )) ||
_cast__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'cast help run commands' commands "$@"
}
(( $+functions[_cast__run_commands] )) ||
_cast__run_commands() {
    local commands; commands=()
    _describe -t commands 'cast run commands' commands "$@"
}
(( $+functions[_cast__help__send_commands] )) ||
_cast__help__send_commands() {
    local commands; commands=(
'--create:Use to deploy raw contract bytecode' \
    )
    _describe -t commands 'cast help send commands' commands "$@"
}
(( $+functions[_cast__send_commands] )) ||
_cast__send_commands() {
    local commands; commands=(
'--create:Use to deploy raw contract bytecode' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast send commands' commands "$@"
}
(( $+functions[_cast__help__shl_commands] )) ||
_cast__help__shl_commands() {
    local commands; commands=()
    _describe -t commands 'cast help shl commands' commands "$@"
}
(( $+functions[_cast__shl_commands] )) ||
_cast__shl_commands() {
    local commands; commands=()
    _describe -t commands 'cast shl commands' commands "$@"
}
(( $+functions[_cast__help__shr_commands] )) ||
_cast__help__shr_commands() {
    local commands; commands=()
    _describe -t commands 'cast help shr commands' commands "$@"
}
(( $+functions[_cast__shr_commands] )) ||
_cast__shr_commands() {
    local commands; commands=()
    _describe -t commands 'cast shr commands' commands "$@"
}
(( $+functions[_cast__help__sig_commands] )) ||
_cast__help__sig_commands() {
    local commands; commands=()
    _describe -t commands 'cast help sig commands' commands "$@"
}
(( $+functions[_cast__sig_commands] )) ||
_cast__sig_commands() {
    local commands; commands=()
    _describe -t commands 'cast sig commands' commands "$@"
}
(( $+functions[_cast__help__sig-event_commands] )) ||
_cast__help__sig-event_commands() {
    local commands; commands=()
    _describe -t commands 'cast help sig-event commands' commands "$@"
}
(( $+functions[_cast__sig-event_commands] )) ||
_cast__sig-event_commands() {
    local commands; commands=()
    _describe -t commands 'cast sig-event commands' commands "$@"
}
(( $+functions[_cast__help__wallet__sign_commands] )) ||
_cast__help__wallet__sign_commands() {
    local commands; commands=()
    _describe -t commands 'cast help wallet sign commands' commands "$@"
}
(( $+functions[_cast__wallet__help__sign_commands] )) ||
_cast__wallet__help__sign_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help sign commands' commands "$@"
}
(( $+functions[_cast__wallet__sign_commands] )) ||
_cast__wallet__sign_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet sign commands' commands "$@"
}
(( $+functions[_cast__help__storage_commands] )) ||
_cast__help__storage_commands() {
    local commands; commands=()
    _describe -t commands 'cast help storage commands' commands "$@"
}
(( $+functions[_cast__storage_commands] )) ||
_cast__storage_commands() {
    local commands; commands=()
    _describe -t commands 'cast storage commands' commands "$@"
}
(( $+functions[_cast__help__tx_commands] )) ||
_cast__help__tx_commands() {
    local commands; commands=()
    _describe -t commands 'cast help tx commands' commands "$@"
}
(( $+functions[_cast__tx_commands] )) ||
_cast__tx_commands() {
    local commands; commands=()
    _describe -t commands 'cast tx commands' commands "$@"
}
(( $+functions[_cast__help__upload-signature_commands] )) ||
_cast__help__upload-signature_commands() {
    local commands; commands=()
    _describe -t commands 'cast help upload-signature commands' commands "$@"
}
(( $+functions[_cast__upload-signature_commands] )) ||
_cast__upload-signature_commands() {
    local commands; commands=()
    _describe -t commands 'cast upload-signature commands' commands "$@"
}
(( $+functions[_cast__help__wallet__vanity_commands] )) ||
_cast__help__wallet__vanity_commands() {
    local commands; commands=()
    _describe -t commands 'cast help wallet vanity commands' commands "$@"
}
(( $+functions[_cast__wallet__help__vanity_commands] )) ||
_cast__wallet__help__vanity_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help vanity commands' commands "$@"
}
(( $+functions[_cast__wallet__vanity_commands] )) ||
_cast__wallet__vanity_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet vanity commands' commands "$@"
}
(( $+functions[_cast__help__wallet__verify_commands] )) ||
_cast__help__wallet__verify_commands() {
    local commands; commands=()
    _describe -t commands 'cast help wallet verify commands' commands "$@"
}
(( $+functions[_cast__wallet__help__verify_commands] )) ||
_cast__wallet__help__verify_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help verify commands' commands "$@"
}
(( $+functions[_cast__wallet__verify_commands] )) ||
_cast__wallet__verify_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet verify commands' commands "$@"
}
(( $+functions[_cast__help__wallet_commands] )) ||
_cast__help__wallet_commands() {
    local commands; commands=(
'new:Create a new random keypair.' \
'vanity:Generate a vanity address.' \
'address:Convert a private key to an address.' \
'sign:Sign a message.' \
'verify:Verify the signature of a message.' \
    )
    _describe -t commands 'cast help wallet commands' commands "$@"
}
(( $+functions[_cast__wallet_commands] )) ||
_cast__wallet_commands() {
    local commands; commands=(
'new:Create a new random keypair.' \
'n:Create a new random keypair.' \
'vanity:Generate a vanity address.' \
'va:Generate a vanity address.' \
'address:Convert a private key to an address.' \
'a:Convert a private key to an address.' \
'addr:Convert a private key to an address.' \
'sign:Sign a message.' \
's:Sign a message.' \
'verify:Verify the signature of a message.' \
'v:Verify the signature of a message.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast wallet commands' commands "$@"
}

if [ "$funcstack[1]" = "_cast" ]; then
    _cast "$@"
else
    compdef _cast cast
fi
